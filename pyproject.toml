[project]
name = "pylaragon"
version = "0.1.0"
description = "Un entorno de desarrollo portable similar a Laragon, construido con Python"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Tu Nombre", email = "tu.email@ejemplo.com" }
]
license = { text = "MIT" }
keywords = ["laragon", "desarrollo", "apache", "mysql", "php", "ssl", "servidor"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Dependencias principales
dependencies = [
    "cryptography>=41.0.0",  # Para generar certificados SSL
    "psutil>=5.9.0",         # Para monitorear procesos del sistema
    "requests>=2.31.0",      # Para hacer peticiones HTTP (opcional)
    "pyyaml>=6.0",          # Para manejar archivos de configuración YAML
]

# Dependencias opcionales organizadas por grupos
[project.optional-dependencies]
gui = [
    "tkinter-tooltip>=2.0.0",  # Tooltips para la GUI
    "pillow>=10.0.0",          # Manejo de imágenes para iconos
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
build = [
    "pyinstaller>=5.13.0",    # Para crear ejecutables
    "cx-freeze>=6.15.0",      # Alternativa para crear ejecutables
]

# Scripts de línea de comandos
[project.scripts]
pylaragon = "main:main"
pylaragon-cli = "cli.main:main"

# URLs del proyecto
[project.urls]
Homepage = "https://github.com/tuusuario/pylaragon"
Repository = "https://github.com/tuusuario/pylaragon.git"
Documentation = "https://pylaragon.readthedocs.io"
"Bug Tracker" = "https://github.com/tuusuario/pylaragon/issues"

# Configuración del sistema de construcción
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

# Configuración específica de uv
[tool.uv]
# Grupos de dependencias para desarrollo
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

# Configuración para el entorno del proyecto
package = true  # Indica que este es un paquete que debe instalarse

# Configuración de índices (si necesitas repositorios privados)
# index-url = "https://pypi.org/simple"
# extra-index-url = []

# Configuración de resolución
resolution = "highest"  # Usar las versiones más altas compatibles

[tool.uv.workspace]
members = [
    "pylaragon",
]

# Configuración de Ruff (linter y formatter)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignorar imports no usados en __init__.py

# Configuración de Black (formatter)
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuración de MyPy (type checker)
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Configuración de pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configuración de coverage
[tool.coverage.run]
source = ["services", "gui"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Configuración de Hatch (build system)
[tool.hatch.version]
path = "services/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/services",
    "/gui",
    "/config",
    "/main.py",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["services", "gui"]

# Configuración para PyInstaller (crear ejecutables)
[tool.hatch.envs.build]
dependencies = [
    "pyinstaller>=5.13.0",
]

[tool.hatch.envs.build.scripts]
exe = "pyinstaller --onefile --windowed --name PyLaragon main.py"
exe-console = "pyinstaller --onefile --console --name PyLaragon-CLI main.py"
